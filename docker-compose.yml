version: "3.9"

networks:
  default:
    name: quickwit-network
    ipam:
      config:
      - subnet: 172.16.7.0/24
        gateway: 172.16.7.1

services:
  localstack:
    image: localstack/localstack:latest
    container_name: localstack
    ports:
      - "4566:4566"
      - "4571:4571"
      - "8080:8080"
    profiles:
      - all
      - localstack
    environment:
      DATA_DIR: /tmp/localstack/data
      # `kinesalite` provides a more accurate implementation than
      # the default Kinesis provider (`kinesis-mock`).
      KINESIS_PROVIDER: kinesalite
      SERVICES: kinesis,s3
    volumes:
      - ".localstack:/etc/localstack/init/ready.d"
      - "${TMPDIR:-/tmp}/quickwit/services/localstack:/var/lib/localstack"
    healthcheck:
      test: ["CMD", "curl", "-k", "-f", "https://localhost:4566/quickwit-integration-tests"]
      interval: 1s
      timeout: 5s
      retries: 100

  postgres:
    image: postgres:9.6.20 # Oldest version we support.
    container_name: postgres
    ports:
      - "5432:5432"
    profiles:
      - all
      - postgres
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_USER: ${POSTGRES_USER:-quickwit-dev}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-quickwit-dev}
      POSTGRES_DB: ${POSTGRES_DB:-quickwit-metastore-dev}
    volumes:
      - "${TMPDIR:-/tmp}/quickwit/services/postgres:/var/lib/postgresql/data/pgdata"
    healthcheck:
      test: ["CMD", "pg_isready"]

  pulsar-broker:
    image: apachepulsar/pulsar:2.11.0
    container_name: pulsar-broker
    command: bin/pulsar standalone
    ports:
      - "6650:6650"
      - "8081:8080"
    environment:
      PULSAR_MEM: " -Xms512m -Xmx512m -XX:MaxDirectMemorySize=2g"
    profiles:
      - all
      - pulsar

  kafka-broker:
    image: confluentinc/cp-kafka:7.2.1
    container_name: kafka-broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    profiles:
      - all
      - kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    healthcheck:
      test: ["CMD", "cub", "kafka-ready", "-b", "localhost:9092", "1", "30"]

  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    profiles:
      - all
      - kafka
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "cub", "zk-ready", "localhost:2181", "30"]

  azurite:
    image: mcr.microsoft.com/azure-storage/azurite:latest
    container_name: azurite
    ports:
        - "10000:10000" # Blob store port
    profiles:
      - all
      - azurite
    volumes:
        - "${TMPDIR:-/tmp}/quickwit/services/azurite:/data"
    command: azurite --blobHost 0.0.0.0 --loose

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    ports:
      - "3000:3000"
    profiles:
      - grafana
      - monitoring
    environment:
      GF_AUTH_DISABLE_LOGIN_FORM: true
      GF_AUTH_ANONYMOUS_ENABLED: true
      GF_AUTH_ANONYMOUS_ORG_ROLE: Admin
    volumes:
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "5775:5775/udp"
      - "5778:5778"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "14250:14250"
      - "14268:14268"
      - "16686:16686"
    profiles:
      - jaeger
      - monitoring

  otel-collector:
    image: otel/opentelemetry-collector
    container_name: otel-collector
    ports:
      - "1888:1888"   # pprof extension
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP http receiver
      - "55679:55679" # zpages extension
    profiles:
      - otel
      - monitoring
    volumes:
      - ./monitoring/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    command: ["--config=/etc/otel-collector-config.yaml"]

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    profiles:
      - prometheus
      - monitoring
    volumes:
      - ./monitoring/prometheus.yaml:/etc/prometheus/prometheus.yml
    extra_hosts:
      - "host.docker.internal:host-gateway"
