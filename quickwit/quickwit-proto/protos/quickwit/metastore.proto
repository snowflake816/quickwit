// Copyright (C) 2023 Quickwit, Inc.
//
// Quickwit is offered under the AGPL v3.0 and as commercial software.
// For commercial licensing, contact us at hello@quickwit.io.
//
// AGPL:
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.


syntax = "proto3";

package quickwit.metastore;

import "quickwit/ingest.proto";

service MetastoreService {
  // Creates an index.
  rpc create_index(CreateIndexRequest) returns (CreateIndexResponse);

  // Gets an index metadata.
  rpc index_metadata(IndexMetadataRequest) returns (IndexMetadataResponse);

  // Gets an indexes metadatas.
  rpc list_indexes_metadatas(ListIndexesMetadatasRequest) returns (ListIndexesMetadatasResponse);

  // Deletes an index
  rpc delete_index(DeleteIndexRequest) returns (DeleteIndexResponse);

  // Gets all splits from index.
  rpc list_all_splits(ListAllSplitsRequest) returns (ListSplitsResponse);

  // Gets splits from index.
  rpc list_splits(ListSplitsRequest) returns (ListSplitsResponse);

  // Stages several splits.
  rpc stage_splits(StageSplitsRequest) returns (SplitResponse);

  // Publishes split.
  rpc publish_splits(PublishSplitsRequest) returns (SplitResponse);

  // Marks splits for deletion.
  rpc mark_splits_for_deletion(MarkSplitsForDeletionRequest) returns (SplitResponse);

  // Deletes splits.
  rpc delete_splits(DeleteSplitsRequest) returns (SplitResponse);

  // Adds source.
  rpc add_source(AddSourceRequest) returns (SourceResponse);

  // Toggles source.
  rpc toggle_source(ToggleSourceRequest) returns (SourceResponse);

  // Removes source.
  rpc delete_source(DeleteSourceRequest) returns (SourceResponse);

  // Resets source checkpoint.
  rpc reset_source_checkpoint(ResetSourceCheckpointRequest) returns (SourceResponse);

  // Gets last opstamp for a given `index_id`.
  rpc last_delete_opstamp(LastDeleteOpstampRequest) returns (LastDeleteOpstampResponse);

  // Creates a delete task.
  rpc create_delete_task(DeleteQuery) returns (DeleteTask);

  // Updates splits `delete_opstamp`.
  rpc update_splits_delete_opstamp(UpdateSplitsDeleteOpstampRequest) returns (UpdateSplitsDeleteOpstampResponse);

  // Lists delete tasks with `delete_task.opstamp` > `opstamp_start` for a given `index_id`.
  rpc list_delete_tasks(ListDeleteTasksRequest) returns (ListDeleteTasksResponse);

  /// Lists splits with `split.delete_opstamp` < `delete_opstamp` for a given `index_id`.
  rpc list_stale_splits(ListStaleSplitsRequest) returns (ListSplitsResponse);

  ///
  /// Shard API
  ///

  // rpc OpenShards(OpenShardsRequest) returns (OpenShardsResponse);

  // rpc CloseShards(CloseShardsRequest) returns (CloseShardsResponse);

  // rpc DeleteShards(DeleteShardsRequest) returns (DeleteShardsResponse);

  // rpc ListShards(ListShardsRequest) returns (ListShardsResponse);
}

message CreateIndexRequest {
  string index_config_serialized_json = 2;
}

message CreateIndexResponse {
  string index_uid = 1;
}

message ListIndexesMetadatasRequest {}

message ListIndexesMetadatasResponse {
  string indexes_metadatas_serialized_json = 1;
}

message DeleteIndexRequest {
  string index_uid = 1;
}

message DeleteTasksResponse {}

message DeleteIndexResponse {}

message IndexMetadataRequest {
  string index_id = 1;
}

message IndexMetadataResponse {
  string index_metadata_serialized_json = 1;
}

message ListAllSplitsRequest {
  string index_uid = 1;
}

message ListSplitsRequest {
  string filter_json = 1;
}

message ListSplitsResponse {
  string splits_serialized_json = 1;
}

message StageSplitsRequest {
  string index_uid = 1;
  string split_metadata_list_serialized_json = 2;
}

message PublishSplitsRequest {
  string index_uid = 1;
  repeated string staged_split_ids = 2;
  repeated string replaced_split_ids = 3;
  optional string index_checkpoint_delta_serialized_json = 4;
  // optional string publish_token = 5;
}

message MarkSplitsForDeletionRequest {
  string index_uid = 2;
  repeated string split_ids = 3;
}

message DeleteSplitsRequest {
  string index_uid = 2;
  repeated string split_ids = 3;
}

message SplitResponse {}

message AddSourceRequest {
  string index_uid = 1;
  string source_config_serialized_json = 2;
}

message ToggleSourceRequest {
  string index_uid = 1;
  string source_id = 2;
  bool enable = 3;
}

message DeleteSourceRequest {
  string index_uid = 1;
  string source_id = 2;
}

message ResetSourceCheckpointRequest {
  string index_uid = 1;
  string source_id = 2;
}

message SourceResponse {}

///
/// Delete tasks.
///

message DeleteTask {
  int64 create_timestamp = 1;
  uint64 opstamp = 2;
  DeleteQuery delete_query = 3;
}

message DeleteQuery {
  // Index ID.
  string index_uid = 1;
  // If set, restrict search to documents with a `timestamp >= start_timestamp`.
  optional int64 start_timestamp = 2;
  // If set, restrict search to documents with a `timestamp < end_timestamp``.
  optional int64 end_timestamp = 3;
  // Query text. The query language is that of tantivy.
  // Query AST serialized in JSON
  string query_ast = 6;

  // Reserved field due to deprecation
  reserved 4, 5;
}

message UpdateSplitsDeleteOpstampRequest {
  string index_uid = 1;
  repeated string split_ids = 2;
  uint64 delete_opstamp = 3;
}

message UpdateSplitsDeleteOpstampResponse {}

message LastDeleteOpstampRequest {
  string index_uid = 1;
}

message LastDeleteOpstampResponse {
  uint64 last_delete_opstamp = 1;
}

message ListStaleSplitsRequest {
  string index_uid = 1;
  uint64 delete_opstamp = 2;
  uint64 num_splits = 3;
}

message ListDeleteTasksRequest {
  string index_uid = 1;
  uint64 opstamp_start = 2;
}

message ListDeleteTasksResponse {
  repeated DeleteTask delete_tasks = 1;
}

///
/// Shard API
///

// message OpenShardsRequest {
//   repeated OpenShardsSubrequest subrequests = 1;
// }

// message OpenShardsSubrequest {
//     string index_uid = 1;
//     string source_id = 2;
//     repeated uint64 shard_ids = 3;
//     string leader_id = 4;
//     optional string follower_id = 5;
// }

// message OpenShardsResponse {
//   repeated OpenShardsSubresponse subresponses = 1;
// }

// message OpenShardsSubresponse {
//     string index_uid = 1;
//     string source_id = 2;
//     repeated quickwit.ingest.Shard open_shards = 3;
// }

// message CloseShardsRequest {
//   repeated CloseShardsSubrequest subrequests = 1;
// }

// message CloseShardsSubrequest {
//     string index_uid = 1;
//     string source_id = 2;
//     uint64 shard_id = 3;
//     quickwit.ingest.ShardState shard_state = 4;
//     optional uint64 replication_position_inclusive = 5;
// }

// message CloseShardsResponse {
//   repeated CloseShardsSuccess successes = 1;
//   repeated CloseShardsFailure failures = 2;
// }

// message CloseShardsSuccess {
//     string index_uid = 1;
//     string source_id = 2;
//     uint64 shard_id = 3;
// }

// message CloseShardsFailure {
//     string index_uid = 1;
//     string source_id = 2;
//     uint64 shard_id = 3;
//     uint32 error_code = 4;
//     string error_message = 5;
// }

// message DeleteShardsRequest {
//   repeated DeleteShardsSubrequest subrequests = 1;
//   bool force = 2;
// }

// message DeleteShardsSubrequest {
//     string index_uid = 1;
//     string source_id = 2;
//     repeated uint64 shard_ids = 3;
// }

// message DeleteShardsResponse {
// }

// message ListShardsRequest {
//   repeated ListShardsSubrequest subrequests = 1;
// }

// message ListShardsSubrequest {
//     string index_uid = 1;
//     string source_id = 2;
//     optional quickwit.ingest.ShardState shard_state = 3;
// }

// message ListShardsResponse {
//     repeated ListShardsSubresponse subresponses = 1;
// }

// message ListShardsSubresponse {
//     string index_uid = 1;
//     string source_id = 2;
//     repeated quickwit.ingest.Shard shards = 3;
// }
