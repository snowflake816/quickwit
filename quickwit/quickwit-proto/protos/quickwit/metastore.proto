// Copyright (C) 2023 Quickwit, Inc.
//
// Quickwit is offered under the AGPL v3.0 and as commercial software.
// For commercial licensing, contact us at hello@quickwit.io.
//
// AGPL:
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.

syntax = "proto3";

package quickwit.metastore;

import "quickwit/ingest.proto";


enum SourceType {
  CLI = 0;
  FILE = 1;
  GCP_PUBSUB = 2;
  INGEST_V1 = 3;
  INGEST_V2 = 4;
  KAFKA = 5;
  KINESIS = 6;
  NATS = 7;
  PULSAR = 8;
  VEC = 9;
  VOID = 10;
}

service MetastoreService {
  // Creates an index.
  rpc CreateIndex(CreateIndexRequest) returns (CreateIndexResponse);

  // Gets an index metadata.
  rpc IndexMetadata(IndexMetadataRequest) returns (IndexMetadataResponse);

  // Gets an indexes metadatas.
  rpc ListIndexesMetadata(ListIndexesMetadataRequest) returns (ListIndexesMetadataResponse);

  // Deletes an index
  rpc DeleteIndex(DeleteIndexRequest) returns (EmptyResponse);

  // Gets splits from index.
  rpc ListSplits(ListSplitsRequest) returns (ListSplitsResponse);

  // Stages several splits.
  rpc StageSplits(StageSplitsRequest) returns (EmptyResponse);

  // Publishes split.
  rpc PublishSplits(PublishSplitsRequest) returns (EmptyResponse);

  // Marks splits for deletion.
  rpc MarkSplitsForDeletion(MarkSplitsForDeletionRequest) returns (EmptyResponse);

  // Deletes splits.
  rpc DeleteSplits(DeleteSplitsRequest) returns (EmptyResponse);

  // Adds source.
  rpc AddSource(AddSourceRequest) returns (EmptyResponse);

  // Toggles source.
  rpc ToggleSource(ToggleSourceRequest) returns (EmptyResponse);

  // Removes source.
  rpc DeleteSource(DeleteSourceRequest) returns (EmptyResponse);

  // Resets source checkpoint.
  rpc ResetSourceCheckpoint(ResetSourceCheckpointRequest) returns (EmptyResponse);

  // Gets last opstamp for a given `index_id`.
  rpc LastDeleteOpstamp(LastDeleteOpstampRequest) returns (LastDeleteOpstampResponse);

  // Creates a delete task.
  rpc CreateDeleteTask(DeleteQuery) returns (DeleteTask);

  // Updates splits `delete_opstamp`.
  rpc UpdateSplitsDeleteOpstamp(UpdateSplitsDeleteOpstampRequest) returns (UpdateSplitsDeleteOpstampResponse);

  // Lists delete tasks with `delete_task.opstamp` > `opstamp_start` for a given `index_id`.
  rpc ListDeleteTasks(ListDeleteTasksRequest) returns (ListDeleteTasksResponse);

  /// Lists splits with `split.delete_opstamp` < `delete_opstamp` for a given `index_id`.
  rpc ListStaleSplits(ListStaleSplitsRequest) returns (ListSplitsResponse);

  ///
  /// Shard API
  ///
  /// Note that for the file-backed metastore implementation, the requests are not processed atomically.
  /// Indeed, each request comprises one or more subrequests that target different indexes and sources processed
  /// independently. Responses list the requests that succeeded or failed in the fields `successes` and
  /// `failures`.

  rpc OpenShards(OpenShardsRequest) returns (OpenShardsResponse);

  // Acquires a set of shards for indexing. This RPC locks the shards for publishing thanks to a publish token and only
  // the last indexer that has acquired the shards is allowed to publish. The response returns for each subrequest the
  // list of acquired shards along with the positions to index from.
  rpc AcquireShards(AcquireShardsRequest) returns (AcquireShardsResponse);

  rpc DeleteShards(DeleteShardsRequest) returns (DeleteShardsResponse);

  rpc ListShards(ListShardsRequest) returns (ListShardsResponse);
}

message EmptyResponse {
}

message CreateIndexRequest {
  string index_config_json = 2;
}

message CreateIndexResponse {
  string index_uid = 1;
}

message ListIndexesMetadataRequest {
  string query_json = 1;
}

message ListIndexesMetadataResponse {
  string indexes_metadata_serialized_json = 1;
}

message DeleteIndexRequest {
  string index_uid = 1;
}

message IndexMetadataRequest {
  optional string index_id = 1;
  optional string index_uid = 2;
}

message IndexMetadataResponse {
  string index_metadata_serialized_json = 1;
}

message ListSplitsRequest {
  string query_json = 1;
}

message ListSplitsResponse {
  string splits_serialized_json = 1;
}

message StageSplitsRequest {
  string index_uid = 1;
  string split_metadata_list_serialized_json = 2;
}

message PublishSplitsRequest {
  string index_uid = 1;
  repeated string staged_split_ids = 2;
  repeated string replaced_split_ids = 3;
  optional string index_checkpoint_delta_json_opt = 4;
  optional string publish_token_opt = 5;
}

message MarkSplitsForDeletionRequest {
  string index_uid = 2;
  repeated string split_ids = 3;
}

message DeleteSplitsRequest {
  string index_uid = 2;
  repeated string split_ids = 3;
}

message AddSourceRequest {
  string index_uid = 1;
  string source_config_json = 2;
}

message ToggleSourceRequest {
  string index_uid = 1;
  string source_id = 2;
  bool enable = 3;
}

message DeleteSourceRequest {
  string index_uid = 1;
  string source_id = 2;
}

message ResetSourceCheckpointRequest {
  string index_uid = 1;
  string source_id = 2;
}

///
/// Delete tasks API.
///

message DeleteTask {
  int64 create_timestamp = 1;
  uint64 opstamp = 2;
  DeleteQuery delete_query = 3;
}

message DeleteQuery {
  // Index ID.
  string index_uid = 1;
  // If set, restrict search to documents with a `timestamp >= start_timestamp`.
  optional int64 start_timestamp = 2;
  // If set, restrict search to documents with a `timestamp < end_timestamp``.
  optional int64 end_timestamp = 3;
  // Query text. The query language is that of tantivy.
  // Query AST serialized in JSON
  string query_ast = 6;

  // Reserved field due to deprecation
  reserved 4, 5;
}

message UpdateSplitsDeleteOpstampRequest {
  string index_uid = 1;
  repeated string split_ids = 2;
  uint64 delete_opstamp = 3;
}

message UpdateSplitsDeleteOpstampResponse {}

message LastDeleteOpstampRequest {
  string index_uid = 1;
}

message LastDeleteOpstampResponse {
  uint64 last_delete_opstamp = 1;
}

message ListStaleSplitsRequest {
  string index_uid = 1;
  uint64 delete_opstamp = 2;
  uint64 num_splits = 3;
}

message ListDeleteTasksRequest {
  string index_uid = 1;
  uint64 opstamp_start = 2;
}

message ListDeleteTasksResponse {
  repeated DeleteTask delete_tasks = 1;
}

///
/// Shard API
///

message OpenShardsRequest {
  repeated OpenShardsSubrequest subrequests = 1;
}

message OpenShardsSubrequest {
    string index_uid = 1;
    string source_id = 2;
    string leader_id = 3;
    optional string follower_id = 4;
    uint64 next_shard_id = 5;
}

message OpenShardsResponse {
  repeated OpenShardsSubresponse subresponses = 1;
}

message OpenShardsSubresponse {
    string index_uid = 1;
    string source_id = 2;
    repeated quickwit.ingest.Shard open_shards = 3;
    uint64 next_shard_id = 4;
}

message AcquireShardsRequest {
  repeated AcquireShardsSubrequest subrequests = 1;
}

message AcquireShardsSubrequest {
    string index_uid = 1;
    string source_id = 2;
    repeated uint64 shard_ids = 3;
    string publish_token = 4;
}

message AcquireShardsResponse {
  repeated AcquireShardsSubresponse subresponses = 1;
}

message AcquireShardsSubresponse {
    string index_uid = 1;
    string source_id = 2;
    repeated quickwit.ingest.Shard acquired_shards = 3;
}

message DeleteShardsRequest {
  repeated DeleteShardsSubrequest subrequests = 1;
  bool force = 2;
}

message DeleteShardsSubrequest {
    string index_uid = 1;
    string source_id = 2;
    repeated uint64 shard_ids = 3;
}

message DeleteShardsResponse {
}

message ListShardsRequest {
  repeated ListShardsSubrequest subrequests = 1;
}

message ListShardsSubrequest {
    string index_uid = 1;
    string source_id = 2;
    optional quickwit.ingest.ShardState shard_state = 3;
}

message ListShardsResponse {
    repeated ListShardsSubresponse subresponses = 1;
}

message ListShardsSubresponse {
    string index_uid = 1;
    string source_id = 2;
    repeated quickwit.ingest.Shard shards = 3;
    uint64 next_shard_id = 4;
}
