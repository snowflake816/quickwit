// Copyright (C) 2023 Quickwit, Inc.
//
// Quickwit is offered under the AGPL v3.0 and as commercial software.
// For commercial licensing, contact us at hello@quickwit.io.
//
// AGPL:
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.

syntax = "proto3";

package quickwit.control_plane;

import "quickwit/ingest.proto";
import "quickwit/metastore.proto";

service ControlPlaneService {
  /// Notify the Control Plane that a change on an index occurred. The change
  /// can be an index creation, deletion, or update that includes a source creation/deletion/num pipeline update.
  // Note(fmassot): it's not very clear for a user to know which change triggers a control plane notification.
  // This can be explicited in the attributes of `NotifyIndexChangeRequest` with an enum that describes the
  // type of change. The index ID and/or source ID could also be added.
  // However, these attributes will not be used by the Control Plane, at least at short term.
  rpc NotifyIndexChange(NotifyIndexChangeRequest) returns (NotifyIndexChangeResponse);

  /// Returns the list of open shards for one or several sources. If the control plane is not able to find any
  /// for a source, it will pick a pair of leader-follower ingesters and will open a new shard.
  rpc GetOpenShards(GetOpenShardsRequest) returns (GetOpenShardsResponse);

  rpc CloseShards(CloseShardsRequest) returns (CloseShardsResponse);
}

message NotifyIndexChangeRequest {}

message NotifyIndexChangeResponse {}

///
/// Shard API
///

message GetOpenShardsRequest {
  repeated GetOpenShardsSubrequest subrequests = 1;
  repeated string unavailable_ingesters = 2;
}

message GetOpenShardsSubrequest {
    string index_id = 1;
    string source_id = 2;
}

message GetOpenShardsResponse {
  repeated GetOpenShardsSubresponse subresponses = 1;
}

message GetOpenShardsSubresponse {
    string index_uid = 1;
    string source_id = 2;
    repeated quickwit.ingest.Shard open_shards = 3;
}

message CloseShardsRequest {
  repeated CloseShardsSubrequest subrequests = 1;
}

message CloseShardsSubrequest {
    string index_uid = 1;
    string source_id = 2;
    uint64 shard_id = 3;
    quickwit.ingest.ShardState shard_state = 4;
    optional uint64 replication_position_inclusive = 5;
}

message CloseShardsResponse {
}
