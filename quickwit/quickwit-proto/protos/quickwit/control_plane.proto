// Copyright (C) 2023 Quickwit, Inc.
//
// Quickwit is offered under the AGPL v3.0 and as commercial software.
// For commercial licensing, contact us at hello@quickwit.io.
//
// AGPL:
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.

syntax = "proto3";

package quickwit.control_plane;

import "quickwit/ingest.proto";
import "quickwit/metastore.proto";

service ControlPlaneService {
  // The control plane acts as a proxy for the metastore for a subset of the API so it can track the state of the
  // metastore accurately and react to events in real-time.

  // The following RPCs are forwarded and handled by the metastore:
  // - `create_index`
  // - `delete_index`
  // - `add_source`
  // - `toggle_source`
  // - `delete_source`

  // Index API

  // Creates a new index.
  rpc CreateIndex(quickwit.metastore.CreateIndexRequest) returns (quickwit.metastore.CreateIndexResponse);

  // Deletes an index.
  rpc DeleteIndex(quickwit.metastore.DeleteIndexRequest) returns (quickwit.metastore.EmptyResponse);

  // Source API

  // Adds a source to an index.
  rpc AddSource(quickwit.metastore.AddSourceRequest) returns (quickwit.metastore.EmptyResponse);

  // Enables or disables a source.
  rpc ToggleSource(quickwit.metastore.ToggleSourceRequest) returns (quickwit.metastore.EmptyResponse);

  // Removes a source from an index.
  rpc DeleteSource(quickwit.metastore.DeleteSourceRequest) returns (quickwit.metastore.EmptyResponse);

  // Shard API

  // Returns the list of open shards for one or several sources. If the control plane is not able to find any
  // for a source, it will pick a pair of leader-follower ingesters and will open a new shard.
  rpc GetOrCreateOpenShards(GetOrCreateOpenShardsRequest) returns (GetOrCreateOpenShardsResponse);
}

// Shard API

message GetOrCreateOpenShardsRequest {
  repeated GetOrCreateOpenShardsSubrequest subrequests = 1;
  repeated string unavailable_ingesters = 2;
}

message GetOrCreateOpenShardsSubrequest {
    string index_id = 1;
    string source_id = 2;
    repeated uint64 closed_shards = 3;
}

// TODO: Handle partial failures.
message GetOrCreateOpenShardsResponse {
  repeated GetOpenShardsSubresponse subresponses = 1;
}

message GetOpenShardsSubresponse {
    string index_uid = 1;
    string source_id = 2;
    repeated quickwit.ingest.Shard open_shards = 3;
}
