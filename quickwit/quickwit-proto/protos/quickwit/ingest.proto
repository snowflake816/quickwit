// Copyright (C) 2023 Quickwit, Inc.
//
// Quickwit is offered under the AGPL v3.0 and as commercial software.
// For commercial licensing, contact us at hello@quickwit.io.
//
// AGPL:
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.

syntax = "proto3";

package quickwit.ingest;


enum CommitTypeV2 {
    Auto = 0;
    Wait = 1;
    Force = 2;
}

message DocBatchV2 {
    bytes doc_buffer = 1;
    repeated uint32 doc_lengths = 2;
}

enum ShardState {
    /// The shard is open and accepts write requests.
    OPEN = 0;
    /// The shard is open and still accepts write requests, but should no longer be advertised to ingest routers.
    /// It is waiting for the its leader or follower to close it with its final replication position, after which write requests will be rejected.
    CLOSING = 1;
    /// The shard is closed and cannot be written to.
    /// It can be safely deleted if the publish position is superior or equal to the replication position.
    CLOSED = 2;
}

message Shard {
    // Immutable fields
    string index_uid = 1;
    string source_id = 2;
    uint64 shard_id = 3;
    /// The node ID of the ingester to which all the write requests for this shard should be sent to.
    string leader_id = 4;
    /// The node ID of the ingester holding a copy of the data.
    optional string follower_id = 5;

    // Mutable fields
    ShardState shard_state = 8;
    /// Position up to which the follower has acknowledged replication of the records written in its log.
    optional uint64 replication_position_inclusive = 9;
    /// Position up to which indexers have indexed and published the records stored in the shard.
    /// It is updated asynchronously in a best effort manner by the indexers and indicates the position up to which the log can be safely truncated.
    string publish_position_inclusive = 10;
    optional string publish_token = 11;
}
