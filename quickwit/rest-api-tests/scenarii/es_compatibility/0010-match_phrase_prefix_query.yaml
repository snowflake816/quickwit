method: [GET]
json:
  query:
    match_phrase_prefix:
      payload.pull_request.body:
        query: "p"
expected:
  hits:
    total:
      value: 2
      relation: "eq"
---
method: [GET]
json:
  query:
    match_phrase_prefix:
      payload.pull_request.body:
        query: "to p"
expected:
  hits:
    total:
      value: 1
      relation: "eq"
---
method: [GET]
json:
  query:
    match_phrase_prefix:
      payload.pull_request.body:
        query: "be to p"
expected:
  hits:
    total:
      value: 1
      relation: "eq"
---
method: [GET]
json:
  query:
    match_phrase_prefix:
      payload.commits.message:
        query: "automated comm"
expected:
  hits:
    total:
      value: 1
      relation: "eq"
    hits:
      - _source:
          payload:
            commits:
              - message: "automated commit"
---
method: [GET]
json:
  query:
    match_phrase_prefix:
      payload.commits.message:
        query: "fix"
        max_expansions: 2
expected:
  hits:
    total:
      value: 6
      relation: "eq"
---
# This is a bit of a sloppy just testing that the tokenizer property is
# plugged
#
# We only apply it to quickwit because the raw tokenizer does not exist in ES.
method: [GET]
engines:
  - quickwit
json:
  query:
    match_phrase_prefix:
      payload.commits.message:
        query: "automated comm"
        analyzer: raw
expected:
  hits:
    total:
      value: 0
      relation: "eq"
---
# This is a bit of a sloppy just testing that the tokenizer property is
# plugged
#
# We only apply it to quickwit becasue the raw tokenizer does not exist in ES.
method: [GET]
json:
  query:
    match_phrase_prefix:
      payload.commits.message:
        query: "automated comm"
        analyzer: inexistant_tokenizer
status_code: 400
